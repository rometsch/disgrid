#+title: Implementation Notes

An API for loading hydro code simulation data. 

* TODO

+ proper calulation of cell centers in non-cartesian geometries
+ alias names for Fargo reader
+ chain alias systems
  - arrange in a list and call subsequently (alias call is idempotent and does not change unknown argument)

* API definition

+ force all physical variables to be an astropy.units.Quantity object i.e. to have a unit

** conventions

+ all physical quantities have units
+ coordinate systems
  - cartesian: x,y,z
  - spherical: r, theta [0,pi], phi [0, 2pi]
  - cylindrical: r, phi [0, 2pi], z
  - polar: r, phi [0,2pi]
  - irregular spaced meshes have a suffix indicating them (extensibility)

** init function

+ make init extendable to provide information that is not automatically findable

#+begin_src ipython :session :exports both :results raw drawer
  class disgrid:

      def __init__(self, path):
          self.path = path # path to one-folder
          self.datadir = self.find_datadir()

#+end_src

** get function

+ specify type of variable
  - reduced (e.g. total disk mass)
    + one quantity for the whole disk
  - field (e.g. density in each cell)
    + defined at each cell in the grid
  - parameter
+ get field by variable name
  - define an alias for common used variables
+ index variable to pick data which can be
  - point in time (astropy units timelike quantity)
  - a list of points in time (astropy units timelike quantity)
  - two points in time (astropy units timelike quantity) to specify a range
  - an integer variable to select a frame
  - two integer variables to select a range
  - a list of integers to select a number of frames
  - a slice object (a:b) to select a range
  - a range iterator (range(a,b)) to select a range

#+begin_src ipython :session :exports both :results raw drawer
  def get(var_type, species, var_name, index1, index2=None ):
      if is_timelike_quantity(index):
        pass # get stuff by time or by time range
      else:
        pass # get stuff by frame number or by frame range or by slice

  def get_time(n_frame):
      pass

  def get_field(var_type, var_name, n_frame, ):
      pass
  def get_scalar(var_type, var_name, n_frame, ):
      pass
  def get_planet_scalar(var_type, var_name, n_frame, ):
      pass
  def get_vector(var_type, var_name, n_frame, ):
      pass

  ekin = d.get_fluid('dust1').get('scalar', 'kinetic_energy', 0:10)
  ekin_planet = d.get_particles('planets', 5).get('vector', 'velocity')

  get(..., 2:20:5)

  v = d.get('scalar', 'vel_x', ...)
  v = d.get('vector', 'vel', axis='r', ...)
  v = d.get('vector', 'vel', axis=1, ...)[1]

  vec = d.get('vector', 'vel', ...)
  v0 = vec[0]['r']

  vx = d.get('vector', 'vel', axis='x', ...) #
  vy = d.get('vector', 'vel', axis='y', ...)


  dens = d.get('field', 'gasdens')
  dens = d.get('field', 'gas/dens')
  plotter = QuiverPlot(dens)
  plotter = VelocitesQuiverPlot(d)


  # in simplot
  class QuiverPlot:
      def __init__(self, data):
          self.data = data

      def plot(self):
          pass
          # magic happens
#+end_src

[2,7,12,20]
[2,20]
2 , 20
2:20
range(2,20)

** vectors

+ stored as Ntimes x Ndim
+ optional parameter in getter for axis (1,2,3, 'r','phi','theta',...)
+ stored as Ntimes x Ndim
+ optional parameter in getter for axis (1,2,3, 'r','phi','theta',...)

** fluids

+ dust or gas
+ contains fields and scalars

** fields

+ store meta data with properties
  - is gas or dust?
  - gas adiabatic index
  - dust grain size

+ contains data -> data() or get('data')
+ contains grid -> grid() or get('grid')
+ grid has coordinate positions exactly where data is defined e.g.
  - in cell centers for density
  - on interfaces for velocities
+ has info on the dimension of data
  - dim(), get('dim') (1,2,3)
+ get one single component of the vector field
  - component(dim), dim = 1,2,3,'r','phi','theta','x','y','z',...
? + has unit function -> unit() or get('unit'), equivalent to data().unit

e.g.

#+begin_src ipython :session :exports both :results raw drawer
get('field', 'mass').get('data') gives the velocity data array
get('field', 'mass').data()

gasdens = get_fluid('gas').get('field', 'MassDensity').data()
#+end_src

+ get_plottable()
  - return a new field object for which data and grid can be directly used for plotting with pcolor mesh
  - interpolate if necessary (ideally grid) -> simtools

#+begin_src ipython :session :exports both :results raw drawer
dens = d.get("fluid", "gas").get("field", "MassDensity").get_plottable()
val = dens.data()
X, Y = dens.grid().get_meshgrid("cartesian")
#+end_src

** grids

getter for meshgrids
+ syntax
  - get_meshgrid(*args, **kwargs)
  - get("meshgrid", *args, **kwargs)
+ select coordinate system
  - arg : coord_sys
+ optional argument =interfaces= 

#+begin_src ipython :session :exports both :results raw drawer
X,Y = get_fluid('gas').get('field', 'MassDensity').grid().get_meshgrid("cartesian")
# or
R, Phi = get_fluid('gas').get('field', 'MassDensity').grid().get("meshgrid", "polar")
#+end_src

getter for single coordinate arrays
+ get_coordinates
  - 1,2,3 : pick coordinate 1,2,3
  - 'r', 'theta', 'phi' / 'x', 'y', 'z' : pick coordinates
+ raise error if grid is not uniformly spaced grid, i.e. something complex : NonUniformGridError

#+begin_src ipython :session :exports both :results raw drawer
get("coordinates", "r")
get_coordinates("r")
#+end_src

** exceptions

+ ObjectNotFoundError : can not find fluid, planet, particles
+ VariableNotFoundError : non existing variables
+ DataNotFoundError : no data can be found for given path in init
+ NonUniformGridError : grid is non uniformly spaced but coordinates of a single axis are requested

#+begin_src ipython :session :exports both :results raw drawer
  class NonUniformGridError(Exception):
      pass

  raise NonUniformgriderror("Grid is non uniformly spaced but positions for single axis {} were requested".format(axis))
#+end_src

** Parameter

+ provide some common parameters via abstract names and structure
+ make params directly accesibly by 
+ load all parameters and store in dict

o.__dict__
o['weird param/name'] -> __getitem__

AttributeError
KeyError

+ subdivide params
  - general
  - physics
  - disk
  - planet
  - particles

e.g. pluto
+ subdivide params
  - general
    + runtime
  - physics
    + eos
    + units
  - domain
    + domain size
    + number of grid cells
  - planet
    + number of planets
  - particles


+ Pluto

gasparam.ini
  Ntot
planetparam.ini
  Ntot

** Variable names

+ variable names should be easy to understand
+ intended to provide the most common used variables for default plots
+ cover ideally all variables appearing in the context of planet disk interactions
+ handle access to variables specific to a code
  - first check whether variable is a standard variable
  - if its not, then check whether the code specific loader provides it
  - else raise Exception

types of variables
+ s : scalar
+ v : vector
+ s,v : variable might appear as both, vector quantity and or scalar, how to handle it?

|             | type | Varname               | description                             | pluto | fargo              | fargo3d |
|-------------+------+-----------------------+-----------------------------------------+-------+--------------------+---------|
| timelike    | s    | Time                  | time in simulation                      |       |                    |         |
|             | s    | RealTime              | time in real world                      |       |                    |         |
|             | s    | OutputNumber          | number of the full output               |       |                    |         |
|             | s    | HydroStepNumber       | number of the hydro step                |       |                    |         |
|-------------+------+-----------------------+-----------------------------------------+-------+--------------------+---------|
|-------------+------+-----------------------+-----------------------------------------+-------+--------------------+---------|
| fluid       | s    | MassDensity           |                                         |       | gasdens            |         |
|             | v    | Velocity              |                                         |       | gasvrad, gasvtheta |         |
|             | s,v  | MagneticFluxDensity   |                                         |       |                    |         |
|             | s    | TotalEnergyDensity    |                                         |       | gasenergy          |         |
|-------------+------+-----------------------+-----------------------------------------+-------+--------------------+---------|
|             | s    | InternalEnergyDensity |                                         |       |                    |         |
|             | s,v  | KineticEnergyDensity  |                                         |       |                    |         |
|             | s,v  | AngularMomentum       |                                         |       |                    |         |
|             | s    | ToomreQ               | toomre parameter                        |       |                    |         |
|             | s    | Eccentricity          |                                         |       |                    |         |
|-------------+------+-----------------------+-----------------------------------------+-------+--------------------+---------|
|-------------+------+-----------------------+-----------------------------------------+-------+--------------------+---------|
| reduced     | s    | Mass                  |                                         |       | Quantities.dat     |         |
|             | s,v  | AngularMomentum       |                                         |       | Quantities.dat     |         |
|             | s    | TotalEnergy           |                                         |       | Quantities.dat     |         |
|             | s    | InternalEnergy        |                                         |       | Quantities.dat     |         |
|             | s,v  | KineticEnergy         |                                         |       | Quantities.dat     |         |
|             | s    | Eccentricity          |                                         |       | Quantities.dat     |         |
|             | s    | Periastron            | periastron of disk                      |       | Quantities.dat     |         |
|             | s    | Inclination           | inclination of disk                     |       |                    |         |
|             | s    | AscendingNode         | angle of the ascending node of disk     |       |                    |         |
|             | s    | MassFlowIn            | mass flow over inner boundary           |       |                    |         |
|             | s    | MassFlowOut           | mass flow over outer boundary           |       |                    |         |
|             | s    | MassFlowWaveDamping   | mass flow through wave damping boundary |       |                    |         |
|             | s    | MassFlowDensityFloor  | mass gain by the density floor          |       |                    |         |
|-------------+------+-----------------------+-----------------------------------------+-------+--------------------+---------|
|-------------+------+-----------------------+-----------------------------------------+-------+--------------------+---------|
| planets     | v    | Position              | position coordinates                    |       |                    |         |
| & particles | v    | Velocity              | velocity components                     |       |                    |         |
|             | s    | Mass                  | mass of the planet                      |       |                    |         |
|             | v    | Acceleration          | acceleration acting onto the particle   |       |                    |         |
|-------------+------+-----------------------+-----------------------------------------+-------+--------------------+---------|
|             | s,v  | AngularMomentum       | angular momentum of the orbit           |       |                    |         |
|             | s    | Eccentricity          | eccentricity of the orbit               |       |                    |         |
|             | s    | Periastron            | periastron of the orbit                 |       |                    |         |
|             | s    | SemiMajorAxis         | semi-major axis of the planet           |       |                    |         |
|             | s    | AscendingNode         | angle of the ascending node             |       |                    |         |
|             | s    | Inclination           | inclination of the orbit                |       |                    |         |
|             | s    | TrueAnomaly           | true anomaly of the orbit               |       |                    |         |
|             | s    | MeanAnomaly           | mean anomaly of the orbit               |       |                    |         |
|             | s    | EccentricAnomaly      | eccentric anomaly of the orbit          |       |                    |         |


*** DONE handling of surface and volume densities

+ look at unit
+ use astropy.units.Unit.is_equivalent

*** DONE handling of vector vs scalar for quantities which have both

+ time index is first, so 2nd element in vector array is v[1][:]
+ have additional =axis= argument in getter which can be
  - 1,2,3 : pick coordinate 1,2,3
  - 'r', 'theta', 'phi' / 'x', 'y', 'z' : pick coordinates
  - by default return full vector if no axis is given
  - return length only when no vector information is present and no axis is given

#+begin_src ipython :session :exports both :results raw drawer
jr = get_planet(1).get("AngularMomentum", 5:10, axis="r")
# jr.shape = (5,)
ja = get_planet(1).get("AngularMomentum", 5:10, axis="abs")
# ja.shape = (5,)
j = get_planet(1).get("AngularMomentum", 5:10)
# j.shape = (5,3) or (5,) if only length is given
jr = j[:][0] # (5,3)
#+end_src

** particle groups

+ planets
+ dust particle
+ tracer particles

+ initial conditions for each particle

+ store particles in groups (particle groups)
  - dust particles of one size
  - tracer particles

+ particle groups
  - meta data
    + e.g. dust grain size
    + dust grain density

+ store particle ids

+ make additional flags possible
  - e.g. particle accreted, ...

** planets

+ name
+ mass
+ position
+ velocity
+ optional forces or torques
+ optional orbital elements

** Meta Data

+ hostname
+ resources used (gpu, cpu)
+ simulation times linked to physical times
+ simulation times linked to output files

** API documentation

some resources on API documentation
+ [[ https://bradfults.com/the-best-api-documentation-b9e46400379a][blog post on good API docus]]
+ [[https://www.programmableweb.com/news/web-api-documentation-best-practices/2010/08/12][Web API Docu best practice]]

** Structures of simulation data

*** representation of data

+ grid
  - type of grid
    + static
    + moving
  - dimension
  - interfaces and cell centers
  
+ fluids 
  + field
    - associated data
      - simulation time
      - grid

+ planets
  + hold individual planet objects

+ particle groups (nbody)
  - time
  - initial conditions
  - values stored as large arrays not individual particles

+ parameter
  - per output step

+ meta data
  - simulation time


* Code Structure

** files
| filename                 | description                                                    |
|--------------------------+----------------------------------------------------------------|
| grid.py                  | code to handle grids                                           |
| field.py                 | fields hold all the information of quantities defined on grids |
| alias.py                 | manage alias for variable name management                      |
| nbody.py                 | nbody system structure                                         |
| parameter.py             | simulation parameters                                          |
| meta.py                  | meta data such as execution times, number of cores, ...        |
| disgrid.py               | main code providing the interface class Simdata                |
| loader/__init__.py       | handles automatic import of modules                            |
| loader/example_loader.py | implements an actual loader which parses code specific data    |

** modular

For every supported code, a loader module needs to be written.
Changes to the code base are not necessary.
Every module in the =loader= directory is automatically imported and the code information is read from a module variable =code_info= which is a tuple containing three strings:

#+begin_example
code_info = ('code_name', 'version_str', 'further_name')
#+end_example



* Caching of remote data

Using the remotedata.Data class, paths on the network are transparently mounted in the background via sshfs.

In the case of iteratively producing plots on a local workstation (as I like to do), most of the data only needs to be downloaded once.
If the simulation is finished, the data doesn't even change at all, so files could be cached indefinitely.

By default, sshfs caches data for 20 seconds.
Right now, the =-o kernel_cache= option is also used to let the kernel cache files.
This seems to work rather well, lowering the time needed to create a remotedata.Data object from 3-5 seconds on the first run, to 1-2 seconds on subsequent runs.

Other sshfs options to try out are

#+begin_src bash
$ sshfs --help
...
-o cache=BOOL          enable caching {yes,no} (default: yes)
    -o cache_max_size=N    sets the maximum size of the cache (default: 10000)
    -o cache_timeout=N     sets timeout for caches in seconds (default: 20)
    -o cache_X_timeout=N   sets timeout for {stat,dir,link} cache
    -o cache_clean_interval=N
                           sets the interval for automatic cleaning of the
                           cache (default: 60)
    -o cache_min_clean_interval=N
                           sets the interval for forced cleaning of the
                           cache if full (default: 5)
...
#+end_src
